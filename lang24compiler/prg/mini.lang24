wrap = { element : int }
wrap_same = { elemt : int }
list = { next : ^list }

table : [2] char
global_str : ^char

# Some recursive types
tip = tip2
tip2 = ^tip
pint = ^int
self = ^self

main() : int = {
    table[0] = 'a';
    table[1] = '\00';
    global_str = "Hello, world!\n";
    local_str = "Hello, local\n";
    printf(global_str);
    printf(local_str);

    return 0;
}
{
    local_str : ^char
    printf(str: ^char) : void
}

# Function prototype
f() : ^wrap


five(stevilo: int, crka: char) : char = {
    bul  = true;
    bul = false;
    bul = 1 == 2;
    if (stevilo == 0) then
        return crka;

    c = five(stevilo - 1, <char> 65);
    return <char>((<int> 'a') + six());
} {
    bul : bool
    c : char
    six() : int = {
        if false then return six();
        return stevilo + 1;
    }
}

g(d : ^wrap_same) : ^void = {
    c = (f()^).element;
    k = f();
    c = k^.elemt;

    return ^c;
} {
    k : ^wrap_same
    c : int
    a : ^char
}
